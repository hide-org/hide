{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Hide","text":"<p>Hide is a headless IDE for coding agents. It provides containerized development environments for codebases and exposes APIs for agents to interact with them.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Development Containers: Isolated development environments for coding agents.</li> <li>CodeGen Toolkit: Designed for coding agents to interact with the codebase.<ul> <li>File API: Read, write files. Apply diffs. Error highlighting.</li> <li>Search API: Search for files, content, and code symbols.</li> <li>Git API: Pull, commit, and push changes to remote git repositories.</li> <li>Task API: Run tests, linters, formatters, and other development tools.</li> </ul> </li> <li>Code Analysis: Feedback from linters, formatters, and compilers.</li> <li>Agents Integration: Bring your own agent and create a custom toolkit from Hide APIs or use Hide's pre-built toolkits for popular frameworks.</li> </ul>"},{"location":"#how-it-works","title":"How it works","text":"<p>Hide consists of two main components: Runtime and SDK.</p>"},{"location":"#runtime","title":"Runtime","text":"<p>Runtime is the backend system responsible for managing development containers and executing tasks. It can be run on any Docker host, whether it's your local machine or a remote server, providing flexibility in deployment options. </p> <p>Key responsibilities of Hide Runtime:</p> <ul> <li>Creating and managing containerized development environments</li> <li>Executing tasks within these environments</li> <li>Providing APIs for interacting with codebases</li> </ul>"},{"location":"#sdk","title":"SDK","text":"<p>SDK is a set of APIs and toolkits designed for coding agents to interact with the codebase. SDK simplifies the process of building custom toolkits for agents and offers pre-built toolkits to get started.</p> <p>Key aspects of Hide SDK:</p> <ul> <li>Provides a high-level abstraction layer for Runtime's APIs</li> <li>Offers pre-built toolkits for popular frameworks and languages, which can be further customized</li> <li>Simplifies the process of building custom toolkits</li> </ul>"},{"location":"CONTRIBUTING/","title":"Contributing to Hide","text":"<p>We're excited that you're interested in contributing to Hide! This document outlines the process for contributing to this project and provides some guidelines to ensure a smooth collaboration.</p>"},{"location":"CONTRIBUTING/#getting-started","title":"Getting Started","text":"<ol> <li>Fork the repository on GitHub.</li> <li>Clone your fork locally:</li> </ol> <pre><code>git clone https://github.com/your-username/hide.git\ncd hide\n</code></pre> <ol> <li>Create a new branch for your contribution:</li> </ol> <pre><code>git checkout -b your-branch-name\n</code></pre>"},{"location":"CONTRIBUTING/#making-changes","title":"Making Changes","text":"<ol> <li>Make your changes in your feature branch.</li> <li>Add or update tests as necessary (see the Testing section below).</li> <li>Ensure your code follows the project's coding standards.</li> <li>Commit your changes:</li> </ol> <pre><code>git commit -m \"Add a brief, descriptive commit message\"\n</code></pre>"},{"location":"CONTRIBUTING/#testing","title":"Testing","text":"<p>We strongly emphasize the importance of testing. Please include tests for any new features or bug fixes. This helps maintain the project's quality and prevents regressions.</p> <p>To run the tests:</p> <pre><code>go test ./...\n</code></pre> <p>See also the Development page for more information on running the tests.</p> <p>Ensure all tests pass before submitting your pull request.</p>"},{"location":"CONTRIBUTING/#submitting-changes","title":"Submitting Changes","text":"<ol> <li>Push your changes to your fork on GitHub:</li> </ol> <pre><code>git push origin your-branch-name\n</code></pre> <ol> <li>Open a pull request against the main Hide repository.</li> <li>Clearly describe your changes and the reasoning behind them in the pull request description.</li> <li>Link any relevant issues in the pull request description.</li> </ol>"},{"location":"CONTRIBUTING/#code-review-process","title":"Code Review Process","text":"<p>The project maintainers will review your pull request. They may suggest some changes or improvements. This is a normal part of the contribution process, so don't be discouraged!</p>"},{"location":"CONTRIBUTING/#good-first-issues","title":"Good First Issues","text":"<p>If you're new to the project, look for issues labeled <code>good first issue</code>. These are typically easier tasks that are suitable for newcomers to the project.</p> <p>You can find these issues here.</p>"},{"location":"CONTRIBUTING/#style-guide","title":"Style Guide","text":"<p>For formatting, we use the standard Go formatting guidelines. To run the formatter, use the following command:</p> <pre><code>go fmt ./...\n</code></pre> <p>or use the <code>make</code> command:</p> <pre><code>make format\n</code></pre>"},{"location":"CONTRIBUTING/#community-guidelines","title":"Community Guidelines","text":"<ul> <li>Be respectful and considerate in your communications with other contributors.</li> <li>Provide constructive feedback and be open to receiving it as well.</li> <li>Focus on the best possible outcome for the project.</li> </ul>"},{"location":"CONTRIBUTING/#questions","title":"Questions?","text":"<p>If you have any questions or need further clarification, don't hesitate to open an issue for discussion.</p> <p>Thank you for contributing to Hide!</p>"},{"location":"api/","title":"API Reference","text":"<p>Coming soon</p>"},{"location":"development/","title":"Development","text":""},{"location":"development/#testing","title":"Testing","text":"<p>To run the tests, run the following command:</p> <pre><code>go test ./...\n</code></pre> <p>or use the <code>make</code> command:</p> <pre><code>make test\n</code></pre> <p>To run the tests with verbose output, run the following command:</p> <pre><code>go test -v ./...\n</code></pre> <p>To run a specific test suite, run the following command:</p> <pre><code>go test -v ./test_suite.go\n</code></pre> <p>To run a specific test, run the following command:</p> <pre><code>go test -v ./test_suite.go -run TestName\n</code></pre>"},{"location":"development/#running-hide-locally","title":"Running Hide locally","text":"<p>To run Hide locally, run the following command:</p> <pre><code>go run ./cmd/hide\n</code></pre> <p>or use the <code>make</code> command:</p> <pre><code>make run\n</code></pre> <p>This will start a local server at <code>http://127.0.0.1:8080/</code>.</p>"},{"location":"development/#release","title":"Release","text":"<p>To release a new version of Hide, follow these steps:</p> <ol> <li> <p>Create a new release using the GitHub UI or the command line. For example, to create a new release with the command line, run the following command:</p> <pre><code>gh release create vX.Y.Z --title \"Hide vX.Y.Z\" --generate-notes\n</code></pre> <p>Replace <code>X.Y.Z</code> with the version number of the new release following the semantic versioning convention.</p> <p>For additional options and for UI instructions, refer to the GitHub documentation.</p> </li> <li> <p>Update the version in the hide brew formula:</p> </li> <li>Copy the URL of the new release (tar.gz file) from the GitHub UI or the command line.</li> <li> <p>Get the SHA256 checksum of the new release (tar.gz file) using the command line:</p> <pre><code>sha256sum vX.Y.Z.tar.gz\n</code></pre> </li> <li> <p>Update the <code>url</code> and the <code>sha256</code> fields in the <code>hide-brew.rb</code> file to the new release URL and checksum.</p> </li> </ol>"},{"location":"development/#documentation","title":"Documentation","text":"<p>The documentation is built using MkDocs. To build the documentation, install MkDocs</p> <pre><code>pip install mkdocs\n</code></pre> <p>and then run the following command:</p> <pre><code>mkdocs build\n</code></pre> <p>The documentation will be built in the <code>site</code> directory.</p> <p>To serve the documentation locally, run the following command:</p> <pre><code>mkdocs serve\n</code></pre> <p>This will start a local server at <code>http://127.0.0.1:8000/</code>.</p>"},{"location":"development/#openapi","title":"OpenAPI","text":"<p>The OpenAPI specification is defined in the <code>openapi.yaml</code> file. To run the Swagger Editor and visualize the OpenAPI specification, run the following command:</p> <pre><code>docker run -p 8081:8080 -v $(pwd):/tmp -e SWAGGER_FILE=/tmp/openapi.yaml swaggerapi/swagger-editor\n</code></pre> <p>This will start a local server at <code>http://127.0.0.1:8081/</code>.</p>"},{"location":"installation/","title":"Installation","text":"<p>A typical installation for Hide consists of 2 parts: a runtime that runs on a local or remote Docker host, and an SDK that interacts with it.</p> <p>Runtime is the backend system responsible for managing development containers and executing tasks.</p> <p>SDK is a set of APIs and toolkits designed for coding agents to interact with the codebase.</p>"},{"location":"installation/#prerequisites","title":"Prerequisites","text":""},{"location":"installation/#docker","title":"Docker","text":"<p>Hide Runtime requires Docker Engine to be installed on your system. Note that if you intend to use Hide with a remote Docker host, you will need to install Docker Engine on that host.</p> <p>For installation instructions for your OS, see the Docker Engine documentation.</p>"},{"location":"installation/#runtime","title":"Runtime","text":"<p>The runtime is responsible for managing the development environments, executing tasks, and providing APIs for interacting with the codebase. Runtime can be installed using Homebrew or built from source.</p>"},{"location":"installation/#using-homebrew","title":"Using Homebrew","text":"<ol> <li> <p>Add the Hide tap to your Homebrew:</p> <pre><code>brew tap hide-org/formulae\n</code></pre> </li> <li> <p>Install Hide using the brew install command:</p> <pre><code>brew install hide\n</code></pre> </li> </ol>"},{"location":"installation/#building-from-source","title":"Building from Source","text":"<p>To build Hide from source, follow these steps:</p> <ol> <li>Ensure you have Go 1.22+ or later installed on your system.</li> <li> <p>Clone the repository:</p> <pre><code>git clone https://github.com/hide-org/hide.git\ncd hide\n</code></pre> </li> <li> <p>Build Hide and install it to your <code>$HOME/go/bin</code> directory:</p> <pre><code>make install\n</code></pre> <p>Note</p> <p>Make sure that <code>$HOME/go/bin</code> is in your <code>$PATH</code> environment variable e.g. <code>export PATH=$PATH:$HOME/go/bin</code>.</p> </li> <li> <p>Install LSP server for your language of choice.</p> <p>For Python, install the <code>pyright</code> package:</p> <pre><code>pipx install pyright\n</code></pre> <p>Note that we use pipx to install the package globally in isolated environment. After installation run <code>pyright</code> command in the shell to install <code>nodejs</code> if it's missing (Pyright is written in Typescript and it will install <code>nodejs</code> for you). </p> <p>For JavaScript and TypeScript, install the <code>typescript-language-server</code> package:</p> <pre><code>npm install -g typescript-language-server\n</code></pre> <p>For Go, install the <code>gopls</code> package:</p> <pre><code>go install golang.org/x/tools/gopls@latest\n</code></pre> </li> </ol>"},{"location":"installation/#running-hide","title":"Running Hide","text":"<p>After installing Hide, you can start the runtime by running the following command:</p> <p><pre><code>hide run\n</code></pre> You should see logs indicating that the server is running, something like: <code>Server started on 127.0.0.1:8080</code>. For more options, including how to specify the port, see help:</p> <pre><code>hide --help\n</code></pre>"},{"location":"installation/#sdk","title":"SDK","text":"<p>The SDK is a set of APIs and toolkits designed for coding agents to interact with the codebase. It is best used for creating new projects and implementing toolkits for coding agents.</p> <p>We provide a Python package containing the SDK and some pre-built toolkits:</p> <pre><code>pip install hide-py\n</code></pre> <p>You can also implement your own toolkit by calling the Runtime's APIs directly (see API Reference).</p> <p>For a quickstart on how to create new projects and interact with them, see the Quickstart guide.</p>"},{"location":"quickstart/","title":"Quickstart","text":"<p>In this quickstart, we will demonstrate how to create new Hide projects and let agents interact with them. We will explore Hide APIs and build a real coding agent using Langchain.</p> <p>This quickstart assumes that you have already installed Hide Runtime and SDK, and have Runtime running on your local machine. If you haven't done so, please refer to the Installation guide.</p>"},{"location":"quickstart/#requirements","title":"Requirements","text":"<ul> <li>Python 3.10+</li> <li>Hide Runtime running on your local machine</li> <li>Hide SDK installed (<code>pip install hide-py</code>)</li> </ul>"},{"location":"quickstart/#creating-a-client","title":"Creating a Client","text":"<p>To interact with the Hide Runtime, we need to create a client. We can do this by importing <code>hide</code> and creating an instance of <code>hide.Client</code>:</p> <pre><code>import hide\nfrom hide import model\n\nhc = hide.Client()\n</code></pre> <p>By default, the client will connect to the runtime running on <code>http://localhost:8080</code>. If you have Hide running on a different host or port, you can specify it when creating the client:</p> <pre><code>hc = hide.Client(base_url=\"https://my-hide-runtime:8081\")\n</code></pre>"},{"location":"quickstart/#creating-a-project","title":"Creating a Project","text":"<p>A project is a containerized development environment for a specific codebase. Creating a project consists of cloning the repository, setting up a devcontainer, and initializing the development environment. We can do this by calling the <code>create_project</code> method on the client and passing a URL of the project on GitHub:</p> <pre><code>project = hc.create_project(\n    repository=model.Repository(url=\"https://github.com/hide-org/math-api.git\")\n)\n</code></pre> <p>Here, we use the Math API which is a simple Python service performing basic mathematical operations. It has a devcontainer configuration file (<code>.devcontainer.json</code>) that is used to create a development environment for the project.</p> <p>Note</p> <p>Devcontainers is a specification for creating reproducible development environments.</p> <p>If your repository doesn't have a devcontainer configuration, you can define one as part of the project creation request using the <code>devcontainer</code> parameter:</p> <pre><code>from hide.devcontainer.model import ImageDevContainer\n\nproject = hc.create_project(\n    repository=model.Repository(url=\"https://github.com/hide-org/math-api.git\"),\n    devcontainer=ImageDevContainer(\n        image=\"mcr.microsoft.com/devcontainers/python:3.12-bullseye\",\n        onCreateCommand=\"pip install poetry &amp;&amp; poetry install\",\n        customizations={\n            \"hide\": {\n                \"tasks\": [\n                    {\"alias\": \"test\", \"command\": \"poetry run pytest\"},\n                    {\"alias\": \"run\", \"command\": \"poetry run uvicorn main:main\"},\n                ]\n            }\n        },\n    )\n)\n</code></pre> <p>Creating a project can take some time. Under the hood, Hide clones the repository, pulls or builds the image, starts the container and installs the project dependencies.</p>"},{"location":"quickstart/#using-the-client","title":"Using the Client","text":"<p>Before we jump to the coding agents, let's take a look at how you can interact with the project created in the previous section. This will help you develop an intuition for how the Hide APIs work and how agents can interact with them.</p>"},{"location":"quickstart/#running-tasks","title":"Running Tasks","text":"<p>You could notice that the devcontainer configuration for the Math API contains a <code>customizations</code> section that defines a custom task called <code>test</code>. We can use this alias to run tests in our project:</p> <pre><code>result = hc.run_task(\n    project_id=project.id,\n    alias=\"test\"\n)\n\nprint(result.stdout)\n# ============================= test session starts ==============================\n# platform linux -- Python 3.12.5, pytest-8.0.1, pluggy-1.4.0\n# rootdir: /workspace\n# plugins: anyio-4.3.0\n# collected 3 items\n#\n# tests/test_api.py ...                                                    [100%]\n# ======================== 3 passed, 5 warnings in 0.05s =========================\n</code></pre> <p>Running tasks is powered by the Task API which also allows us to run arbitrary shell commands by providing the <code>command</code> parameter:</p> <pre><code>result = hc.run_task(\n    project_id=project.id,\n    command=\"pwd\"\n)\n\nprint(result.stdout)\n# /workspace\n</code></pre> <p>The tasks are executed from the project root so the print statement outputs the path to the project root directory.</p> <p>Note: Task API supports timeouts. It's a good practice to use it especially when the task is created by an agent.</p> <pre><code>result = hc.run_task(\n    project_id=project.id,\n    command=\"pwd\",\n    timeout=1, #time out and release resources after 1 second.\n)\n</code></pre>"},{"location":"quickstart/#reading-and-updating-files","title":"Reading and Updating Files","text":"<p>We can also read and update files in the project. For example, let's read the <code>maths.py</code> file and add a new endpoint in it. First, let's read the file:</p> <pre><code>file = hc.get_file(\n    project_id=project.id,\n    path=\"my_tiny_service/api/routers/maths.py\"\n)\n\nprint(file)\n#  1 | \"\"\"Endpoint examples with input/output models and error handling.\"\"\"\n#  2 | import logging\n#  3 |\n#  4 | import fastapi\n#  5 | import pydantic\n#  6 | import starlette.status\n#  7 |\n#  8 | router = fastapi.APIRouter()\n#... | ...\n#112 |         raise fastapi.HTTPException(\n#113 |             status_code=starlette.status.HTTP_400_BAD_REQUEST,\n#114 |             detail=\"Division by zero is not allowed\",\n#115 |         ) from e\n</code></pre> <p>The file includes line numbers which can be useful when coding agents update files. Updating files can be done in three ways: by replacing the entire file, by manipulating lines, or by applying unified diffs.</p> <p>Note</p> <p>The Unified Diff is a format for comparing two files or versions of a file.</p> <p>Let's see how the unified diff works:</p> <pre><code>patch = \"\"\"\\\n--- a/my_tiny_service/api/routers/maths.py\n+++ b/my_tiny_service/api/routers/maths.py\n@@ -113,3 +113,17 @@\n             status_code=starlette.status.HTTP_400_BAD_REQUEST,\n             detail=\"Division by zero is not allowed\",\n         ) from e\n+\n+\n+@router.post(\n+    \"/exp\",\n+    summary=\"Calculate the exponent of two numbers\",\n+    response_model=MathsResult,\n+)\n+def exp(maths_input: MathsIn) -&gt; MathsResult:\n+    \\\"\\\"\\\"Calculates the exponent of two whole numbers.\\\"\\\"\\\"\n+    return MathsResult(\n+        **maths_input.dict(),\n+        operation=\"exp\",\n+        result=maths_input.number1 ** maths_input.number,\n+    )\n\"\"\"\n\nfile = hc.update_file(\n    project_id=project.id,\n    path='my_tiny_service/api/routers/maths.py',\n    update=model.UdiffUpdate(patch=patch)\n)\n\nprint(file)\n#  1 | \"\"\"Endpoint examples with input/output models and error handling.\"\"\"\n#  2 | import logging\n#  3 |\n#  4 | import fastapi\n#  5 | import pydantic\n#  6 | import starlette.status\n#  7 |\n#  8 | router = fastapi.APIRouter()\n#... | ...\n#123 | def exp(maths_input: MathsIn) -&gt; MathsResult:\n#124 |     \"\"\"Calculates the exponent of two whole numbers.\"\"\"\n#125 |     return MathsResult(\n#126 |         **maths_input.dict(),\n#127 |         operation=\"exp\",\n#128 |         result=maths_input.number1 ** maths_input.number,\n#                                                        ^^^^^^ Error: Cannot access attribute \"number\" for class \"MathsIn\"\n#  Attribute \"number\" is unknown\n#\n#129 |     )\n</code></pre> <p>It turns out there was a typo in my patch but Hide noticed it and highlighted the line with the error. Like a normal IDE, Hide runs continuous diagnostics on the code using LSP servers and highlights errors. Currently, Hide provides diagnostics for Python, JavaScript, TypeScript, and Go, and we can add more languages if needed. Let us know in the GitHub Issues if you need support for other languages.</p> <p>Note</p> <p>The Language Server Protocol (LSP) defines the protocol used between an editor or IDE and a language server that provides language features like auto complete, go to definition, find all references etc.</p> <p>For more information on all the available update types and their parameters, see the Files API documentation.</p>"},{"location":"quickstart/#using-the-toolkit","title":"Using the Toolkit","text":"<p>Finally, let's take a look at how we can use the Hide toolkit to build a coding agent. For this quickstart, we will use the Langchain framework to build a simple coding agent that can solve coding problems based on a given prompt.</p> <p>First, let's initialize the toolkit:</p> <pre><code>from hide.toolkit import Toolkit\n\ntoolkit = Toolkit(project=project, client=hc)\nlc_toolkit = toolkit.as_langchain()\n</code></pre> <p>The toolkit is a collection of pre-built tools that can be used by agent to solve coding problems. Let's take a look at the tools available in the toolkit:</p> <pre><code>for tool in lc_toolkit.get_tools():\n    print(\"Name:\", tool.name)\n    print(\"Description:\", tool.description)\n    print(\"Args:\", tool.args)\n    print(\"\")\n\n# Name: append_lines\n# Description: append_lines(path: str, content: str) -&gt; str - Append lines to a file in the project.\n# Args: {'path': {'title': 'Path', 'type': 'string'}, 'content': {'title': 'Content', 'type': 'string'}}\n#\n# ...\n#\n# Name: run_task\n# Description: run_task(command: Optional[str] = None, alias: Optional[str] = None) -&gt; str - Run a task in the project. Provide either command or alias. Command will be executed in the shell.\n#         For the list of available tasks and their aliases, use the `get_tasks` tool.\n# Args: {'command': {'title': 'Command', 'type': 'string'}, 'alias': {'title': 'Alias', 'type': 'string'}}\n</code></pre> <p>Now, let's create an agent using the OpenAI's GPT-4o model. Make sure to replace <code>YOUR_OPENAI_API_KEY</code> with your actual OpenAI API key.</p> <pre><code>from langchain import hub\nfrom langchain.agents import AgentExecutor, create_tool_calling_agent\nimport os\n\nos.environ[\"OPENAI_API_KEY\"] = \"YOUR_OPENAI_API_KEY\"\n\nfrom langchain_openai import ChatOpenAI\n\n# Using seed for reproducible results\nllm = ChatOpenAI(model=\"gpt-4o\", model_kwargs={\"seed\": 128})\nprompt = hub.pull(\"hwchase17/openai-tools-agent\")\ntools = lc_toolkit.get_tools()\n\nagent = create_tool_calling_agent(llm, tools, prompt)\nagent_executor = AgentExecutor(agent=agent, tools=tools, verbose=True)\n</code></pre> <p>With the agent created, we can prompt it to add the tests for the new endpoint that we created earlier:</p> <pre><code>prompt = \"\"\"\\\nI created the new exponentiation endpoint in the `my_tiny_service/api/routers/maths.py` file. Could you add the tests for it in the `tests/test_api.py` file?\nRun the tests and make sure they pass. If the tests fail, fix them until they pass.\n\"\"\"\n\nresponse = agent_executor.invoke({\"input\": prompt})\n\nprint(response[\"output\"])\n# &gt; Entering new AgentExecutor chain...\n#\n# Invoking: `get_file` with `{'path': 'my_tiny_service/api/routers/maths.py'}`\n#\n# ...\n#\n# &gt; Finished chain.\n#\n# All tests, including the new one for exponentiation, have passed.\n</code></pre> <p>This task will require the agent to use multiple tools from the Hide toolkit. The agent will first read the content of the <code>maths.py</code> and <code>test_api.py</code> files, then update them according to the instructions (fixing the typo we introduced earlier), and finally run the tests. If the tests fail the agent will try to fix them. It can take few rounds but eventually the agent will succeed.</p>"},{"location":"quickstart/#next-steps","title":"Next Steps","text":"<p>In this quickstart, we demonstrated how to create new Hide projects and let agents interact with them. For more details on how to use Hide, check out our Guides and Tutorials.</p>"},{"location":"tutorials/","title":"Tutorials","text":"<p>Welcome to the Hide Tutorials section. These step-by-step guides will help you integrate Hide with popular AI agent frameworks and demonstrate how to build your own custom agent using Hide's powerful features.</p>"},{"location":"tutorials/#available-tutorials","title":"Available Tutorials:","text":"<ol> <li>Langchain Tutorial: Learn how to use Hide toolkit with Langchain to build a code generation agent.</li> <li> Autogen Tutorial: Explore how to use Hide toolkit with Autogen to build a code generation agent.</li> <li> SWE-Agent Tutorial: Learn how to use Hide toolkit to build a code generation agent like the famous SWE-Agent.</li> </ol> <p>Choose a tutorial from the navigation menu to get started!</p>"},{"location":"tutorials/autogen/","title":"Autogen","text":"<p>Coming soon</p>"},{"location":"tutorials/langchain/","title":"Langchain Tutorial","text":"<p>In this tutorial, we will use the Langchain framework to build a simple coding agent that can solve coding problems based on a given prompt. We will demonstrate how to use Hide to create a development environment, and how an agent can interact with it using the Hide toolkit. </p> <p>For this tutorial, we will use the Math API as our example project. This project is a simple Python service that performs basic mathematical operations. It is capable of performing addition, subtraction, multiplication, and division operations. It also has some tests that we can use to assert the code quality of the agent.</p> <p>We choose OpenAI as the LLM provider for this tutorial, but you can use any other provider as well.</p>"},{"location":"tutorials/langchain/#setting-up-the-environment","title":"Setting Up the Environment","text":"<p>To get started, you need to have the following tools installed:</p> <ul> <li>Docker</li> <li>Hide</li> </ul> <p>We will use Python to build our agent, so make sure you have Python installed. We highly recommend creating a new virtual environment for this tutorial to avoid any dependency issues.</p> <p>Also, make sure you have the OpenAI API key ready. You can get it here. You can either set it as an environment variable or a constant in your code.</p>"},{"location":"tutorials/langchain/#installing-docker","title":"Installing Docker","text":"<p>If you don't have Docker installed, follow the instructions on the Docker website to install it.</p>"},{"location":"tutorials/langchain/#installing-hide","title":"Installing Hide","text":"<p>To install Hide, run the following command:</p> <pre><code>brew install hide\n</code></pre> <p>For more installation options, refer to the installation guide.</p>"},{"location":"tutorials/langchain/#starting-the-hide-server","title":"Starting the Hide Server","text":"<p>Once you have Hide installed, you can start the server by running the following command:</p> <pre><code>hide\n</code></pre> <p>This will start the server on <code>http://localhost:8080</code>.</p>"},{"location":"tutorials/langchain/#installing-python-dependencies","title":"Installing Python Dependencies","text":"<p>We will use Hide and the Langchain framework to build our agent. Let's install the necessary dependencies.</p> <pre><code>pip install langchain hide-py\n</code></pre>"},{"location":"tutorials/langchain/#creating-a-project","title":"Creating a Project","text":"<p>Let's create a new project for our agent. Create a new Python file, e.g., <code>main.py</code>, and add the following code:</p> <pre><code>import os\n\nfrom hide.client.hide_client import HideClient\nfrom hide.langchain.toolkit import HideToolkit\nfrom langchain import hub\nfrom langchain.agents import AgentExecutor, create_tool_calling_agent\nfrom langchain_openai import ChatOpenAI\n\nOPENAI_API_KEY = \"ENTER YOUR KEY\"\nHIDE_BASE_URL = \"http://localhost:8080\"\nPROJECT_GIT_URL = \"https://github.com/hide-org/math-api.git\"\n\nif \"OPENAI_API_KEY\" not in os.environ:\n    os.environ[\"OPENAI_API_KEY\"] = OPENAI_API_KEY\n\nhide_client = HideClient(base_url=HIDE_BASE_URL)\nproject = hide_client.create_project(url=PROJECT_GIT_URL)\n\nprint(f\"Project ID: {project.id}\")\n</code></pre> <p>Here, few things are happenning. First, we add all the required imports. Second, we define all the necessary constants and set the OpenAI API key as an environment variable if it is not already set. Finally, we create a Hide client and use it to create a new project.</p> <p>Creating a project can take some time. Under the hood, Hide clones the repository and sets up a devcontainer using the configuration from the repository. This process can take a few minutes, so be patient.</p>"},{"location":"tutorials/langchain/#building-the-agent","title":"Building the Agent","text":"<p>Now that we have our project created, we can start building our agent. First, let's create a toolkit for our agent. Add the following code to the <code>main.py</code> file:</p> <pre><code>toolkit = HideToolkit(project_id=project.id, hide_client=hide_client)\ntools = toolkit.get_tools()\n\nfor tool in tools:\n    print(\"Name:\", tool.name)\n    print(\"Description:\", tool.description)\n    print(\"Args:\", tool.args)\n    print(\"\")\n</code></pre> <p>This code creates a Langchain toolkit for our agent and prints out the tool details for illustration purposes.</p> <p>Next, let's create an agent. Add the following code to the <code>main.py</code> file:</p> <pre><code>llm = ChatOpenAI(model=\"gpt-4o\")\nprompt = hub.pull(\"hwchase17/openai-tools-agent\")\nagent = create_tool_calling_agent(llm, tools, prompt)\nagent_executor = AgentExecutor(agent=agent, tools=tools, verbose=True)\n</code></pre> <p>Now, our agent is ready and we can start testing it </p>"},{"location":"tutorials/langchain/#simple-questions","title":"Simple Questions","text":"<p>Let's test our agent by asking it a simple question. For example, in the devcontainer configuration for Tiny Math Service, we defined several tasks, one of which is for running tests. Agents can run tasks using the Hide toolkit. Let's ask our agent to run the tests and see if it can figure out how to do it:</p> <pre><code>response = agent_executor.invoke({\"input\": \"Run the tests for the math service\"})\nprint(\"\")\nprint(response[\"output\"])\n</code></pre> <p>Using the Hide toolkit, the agent will list all the available tools, pick the one that matches the task, and run it. Sometimes, the agent tries to guess which task to run which can lead to a failure but the agent will recover by checking all the available tools and calling the right one. </p>"},{"location":"tutorials/langchain/#advanced-questions","title":"Advanced Questions","text":"<p>Now let's try something real. Let's ask our agent to add a new endpoint that calculates the exponent of two numbers. Additionally, we want the endpoint to be covered by tests. The agent should be able to figure out how to do this. Our prompt will be more complicated here and include more detailed instructions but if you have ever worked with the coding agents none of this should come as a surprise to you.</p> <p>Note</p> <p>We are calling the file names explicitly because the search functionality is not yet implemented in Hide. This will be fixed soon.</p> <pre><code>prompt = \"\"\"\\\nYou are a helpful AI assistant.\nUpdate the source code file following the instructions.\nThe user can't modify your code. So do not suggest incomplete code which requires users to modify.\nMake sure that no comments and empty lines are removed from the file.\nCheck out the new exponentiation endpoint in the `my_tiny_service/api/routers/maths.py` file and add the tests for it in the `tests/test_api.py` file.\nRun the tests and make sure they pass. If the tests fail, fix them until they pass.\n\"\"\"\nresponse = agent_executor.invoke({\"input\": prompt})\nprint(\"\")\nprint(response[\"output\"])\n</code></pre> <p>This task will require the agent to use multiple tools from the Hide toolkit. The agent will first read the content of the <code>maths.py</code> and <code>test_api.py</code> files, then update them according to the instructions, and finally run the tests. If the tests fail the agent will try to fix them. It can take few rounds but eventually the root cause of the problem will be fixed.</p>"},{"location":"tutorials/langchain/#conclusion","title":"Conclusion","text":"<p>In this tutorial, we demonstrated how to use the Langchain framework to build a simple coding agent that can solve coding problems based on a given prompt. We used Hide to create a development environment and the Hide toolkit to interact with it. Check out the SWE-agent tutorial to learn how you can build a custom agent, like the SWE-agent, for your coding projects.</p>"},{"location":"tutorials/swe-agent/","title":"SWE-Agent Tutorial","text":"<p>Coming soon</p>"},{"location":"usage/","title":"Usage","text":"<p>Our guides are designed to help you understand and effectively use Hide's core features. Each guide provides detailed explanations, practical examples, and best practices to help you make the most of Hide.</p>"},{"location":"usage/#available-guides","title":"Available Guides:","text":"<ol> <li> <p>Files Guide: Learn how to manage files within your projects, including creating, reading, updating, and deleting files.</p> </li> <li> <p>Projects Guide: Discover how to create and manage your development projects in Hide.</p> </li> <li> <p>Tasks Guide: Explore how to create and manage tasks within your projects.</p> </li> <li> <p> Git Guide: Git integration guide.</p> </li> <li> <p>Search Guide: Learn how to efficiently search and navigate through your codebase.</p> </li> </ol> <p>Choose a guide from the navigation menu to get started!</p>"},{"location":"usage/files/","title":"Files","text":""},{"location":"usage/files/#understanding-files-in-hide","title":"Understanding Files in Hide","text":"<p>In Hide, the Files API allows coding agents to interact with the project's file system within the devcontainer environment. This enables operations such as creating, reading, updating, and deleting files. All file paths are relative to the project's root directory.</p> <p>Note</p> <p>For all code examples, the server is assumed to be running on <code>localhost:8080</code>. Adjust the URL if your Hide server is running on a different host or port.</p> <p>Note</p> <p>For all requests, replace <code>{project_id}</code> with your actual project ID.</p>"},{"location":"usage/files/#creating-a-file","title":"Creating a File","text":"<p>To create a new file in your project:</p> curlpython <pre><code>curl -X POST http://localhost:8080/projects/{project_id}/files \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\"path\": \"example.txt\", \"content\": \"Hello, World!\"}'\n</code></pre> <pre><code># Coming soon\n</code></pre> <p>This will create a file named <code>example.txt</code> in your project's root directory with the content <code>Hello, World!</code>.</p>"},{"location":"usage/files/#listing-files","title":"Listing Files","text":"<p>To list all files in your project:</p> curlpython <pre><code>curl http://localhost:8080/projects/{project_id}/files\n</code></pre> <pre><code># Coming soon\n</code></pre> <p>This will return a list of all files recursively in your project's root directory.</p>"},{"location":"usage/files/#reading-a-file","title":"Reading a File","text":"<p>To read the contents of a specific file:</p> curlpython <pre><code>curl http://localhost:8080/projects/{project_id}/files/example.txt\n</code></pre> <pre><code># Coming soon\n</code></pre> <p>This will return the contents of the file <code>example.txt</code> in your project's root directory.</p> <p>Reading files supports different parameters such as specifying a range of lines, or including the line numbers in the response. To include the line numbers, set the <code>showLineNumbers</code> parameter to <code>true</code>:</p> curlpython <pre><code>curl http://localhost:8080/projects/{project_id}/files/example.txt?showLineNumbers=true\n</code></pre> <pre><code># Coming soon\n</code></pre> <p>To specify a range of lines, set the <code>startLine</code> and <code>numLines</code> parameters:</p> curlpython <pre><code>curl http://localhost:8080/projects/{project_id}/files/example.txt?startLine=10&amp;numLines=20\n</code></pre> <pre><code># Coming soon\n</code></pre>"},{"location":"usage/files/#updating-a-file","title":"Updating a File","text":"<p>Updating files can be done in three ways: by replacing the entire file, by updating lines, or by applying unified diffs. We will look at each of these in the next sections.</p>"},{"location":"usage/files/#replacing-the-entire-file","title":"Replacing the entire file","text":"<p>To replace the entire file, we can use the update type <code>overwrite</code> and provide the new content as the <code>content</code> parameter:</p> pythoncurl <pre><code>from hide.model import FileUpdateType, OverwriteUpdate\n\nresult = hide_client.update_file(\n    project_id=\"my-project\",\n    path=\"path/to/file.py\",\n    type=FileUpdateType.OVERWRITE,\n    update=OverwriteUpdate(\n        content=\"def hello_world():\\n    print('Hello, World!')\\n\"\n    )\n)\n</code></pre> <pre><code>curl -X PUT http://localhost:8080/projects/my-project/files/path/to/file.py \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n        \"type\": \"overwrite\",\n        \"overwrite\": {\n            \"content\": \"def hello_world():\\n    print('Hello, World!')\\n\"\n        }\n    }'\n</code></pre> <p>This will replace the entire file with the new content.</p>"},{"location":"usage/files/#updating-lines","title":"Updating lines","text":"<p>To update lines, we can use the update type <code>linediff</code> and provide the line diff as the <code>lineDiff</code> parameter:</p> pythoncurl <pre><code>from hide.model import FileUpdateType, LineDiffUpdate\n\nresult = hide_client.update_file(\n    project_id=\"my-project\",\n    path=\"path/to/file.py\",\n    type=FileUpdateType.LINEDIFF,\n    update=LineDiffUpdate(\n        start_line=1,\n        end_line=2,\n        content=\"def hello_world():\\n    print('Hello, World!')\\n\"\n    ),\n)\n</code></pre> <pre><code>curl -X PUT http://localhost:8080/projects/my-project/files/path/to/file.py \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n        \"type\": \"linediff\",\n        \"lineDiff\": {\n            \"startLine\": 1,\n            \"endLine\": 2,\n            \"content\": \"def hello_world():\\n    print('Hello, World!')\\n\"\n        }\n    }'\n</code></pre> <p>This will update the lines from line 1 to 3 with the new content.</p>"},{"location":"usage/files/#applying-unified-diffs","title":"Applying unified diffs","text":"<p>To apply unified diffs, we can use the update type <code>udiff</code> and provide the patch as the <code>patch</code> parameter:</p> pythoncurl <pre><code>from hide.model import FileUpdateType, UdiffUpdate\n\nresult = hide_client.update_file(\n    project_id=\"my-project\",\n    path=\"path/to/file.py\",\n    type=FileUpdateType.UDIFF,\n    udiff=UdiffUpdate(\n        patch=\"\"\"--- path/to/file.py\n+++ path/to/file.py\n@@ -1,2 +1,2 @@\n def hello_world():\n-    print('Hello, World!')\n+    print('Hello, World!!!')\n\"\"\"\n    )\n)\n</code></pre> <pre><code>curl -X PUT http://localhost:8080/projects/my-project/files/path/to/file.py \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n        \"type\": \"udiff\",\n        \"udiff\": {\n            \"patch\": \"\"\"--- path/to/file.py\n    +++ path/to/file.py\n    @@ -1,2 +1,2 @@\n     def hello_world():\n    -    print('Hello, World!')\n    +    print('Hello, World!!!')\n    \"\"\"\n        }\n    }'\n</code></pre> <p>This will apply the unified diff to the file and update the lines accordingly.</p>"},{"location":"usage/files/#deleting-a-file","title":"Deleting a File","text":"<p>To delete a specific file:</p> curlpython <pre><code>curl -X DELETE http://localhost:8080/projects/{project_id}/files/example.txt\n</code></pre> <pre><code># Coming soon\n</code></pre> <p>This will delete the file <code>example.txt</code> in your project's root directory.</p>"},{"location":"usage/files/#error-handling","title":"Error Handling","text":"<p>The API uses standard HTTP status codes to indicate the success or failure of requests:</p> <ul> <li>200: Successful operation</li> <li>404: File or project not found</li> <li>400: Bad request (e.g., invalid input)</li> <li>500: Internal server error</li> </ul> <p>Always check the status code and response body for detailed error messages.</p>"},{"location":"usage/git/","title":"Git","text":"<p>Coming soon</p>"},{"location":"usage/projects/","title":"Projects","text":""},{"location":"usage/projects/#understanding-hide-projects","title":"Understanding Hide Projects","text":"<p>In Hide, a project represents a self-contained development environment for a specific codebase. Each project is built on top of a devcontainer, providing a consistent and isolated environment for coding agents to work in.</p> <p>Key features of Hide projects:</p> <ol> <li>Devcontainer-based: Each project runs in its own devcontainer, ensuring consistency across different machines and environments.</li> <li>GitHub Integration: Currently, Hide supports creating projects from GitHub repositories. Support for local projects is coming soon.</li> <li>Flexible Configuration: Projects can use a devcontainer.json file from the repository or accept container configuration as part of the project creation request.</li> </ol> <p>Note</p> <p>For all code examples, the server is assumed to be running on <code>localhost:8080</code>. Adjust the URL if your Hide server is running on a different host or port.</p>"},{"location":"usage/projects/#creating-a-project","title":"Creating a Project","text":"<p>To create a new project, you need to provide a GitHub repository URL. Hide will clone the repository, set up a devcontainer and associate it with the project id. The devcontainer configuration can come from two sources:</p> <ol> <li>A <code>devcontainer.json</code> file in the repository (usually in the <code>.devcontainer</code> directory, for more options see devcontainer.json specification).</li> <li>A configuration object in the project creation request.</li> </ol> <p>If your repository contains a <code>devcontainer.json</code> file, omit the <code>devcontainer</code> field in the request. Hide will use the configuration from the repository. Otherwise provide configuration object in the <code>devcontainer</code> field of the project creation request. You can also use this field to override the existing <code>devcontainer.json</code> file.</p>"},{"location":"usage/projects/#using-devcontainerjson","title":"Using devcontainer.json","text":"curlpython <pre><code>curl -X POST http://localhost:8080/projects \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"repository\": {\n      \"url\": \"https://github.com/your-username/your-repo.git\",\n    }\n  }'\n</code></pre> <pre><code># Coming soon\n</code></pre>"},{"location":"usage/projects/#using-request-body","title":"Using request body","text":"curlpython <pre><code>curl -X POST http://localhost:8080/projects \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"repository\": {\n      \"url\": \"https://github.com/your-username/your-repo.git\",\n    },\n    \"devcontainer\": {\n      \"name\": \"my-project\",\n      \"image\": \"mcr.microsoft.com/devcontainers/python:3.10\",\n      \"onCreateCommand\": \"pip install -r requirements.txt\"\n    }\n  }'\n</code></pre> <pre><code># Coming soon\n</code></pre>"},{"location":"usage/projects/#using-commit-hash","title":"Using commit hash","text":"<p>You can also specify a commit hash to checkout when cloning the repository. This is useful when you want your agent to work on a specific commit of a repository that is not the latest commit.</p> curlpython <pre><code>curl -X POST http://localhost:8080/projects \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"repository\": {\n      \"url\": \"https://github.com/your-username/your-repo.git\",\n      \"commit\": \"your-commit-hash\"\n    }\n  }'\n</code></pre> <pre><code># Coming soon\n</code></pre>"},{"location":"usage/projects/#deleting-a-project","title":"Deleting a Project","text":"<p>Deleting a project will stop the project's devcontainer and delete the project.</p> <p>To delete a project with id <code>123</code>:</p> curlpython <pre><code>curl -X DELETE http://localhost:8080/projects/123\n</code></pre> <pre><code># Coming soon\n</code></pre>"},{"location":"usage/projects/#using-images-from-docker-hub","title":"Using images from Docker Hub","text":"<p>To use images from Docker Hub, you need to provide Docker Hub credentials when starting the server. You can do this by setting the <code>DOCKER_USER</code> and <code>DOCKER_TOKEN</code> environment variables.</p> <pre><code>export DOCKER_USER=your-docker-hub-username\nexport DOCKER_TOKEN=your-docker-hub-token\nhide\n</code></pre> <p>You can also set these environment variables in the file and run Hide with the <code>env</code> flag:</p> <pre><code>touch .env\necho \"DOCKER_USER=your-docker-hub-username\" &gt;&gt; .env\necho \"DOCKER_TOKEN=your-docker-hub-token\" &gt;&gt; .env\nhide -env .env\n</code></pre>"},{"location":"usage/projects/#caveats","title":"Caveats","text":"<p>Hide tries to be as close to the devcontainer specification as possible. However some parts of the specification are not supported yet due to their complexity or ambiguity. For example:</p> <ul> <li>Devcontainer configurations based on Docker Compose are not supported yet.</li> <li>Devcontainer Features are not supported yet.</li> <li>Devcontainer image labels are not supported yet.</li> </ul> <p>If you notice any other issues or have suggestions for improvements, please open an issue or submit a pull request on the Hide repository.</p>"},{"location":"usage/search/","title":"Search","text":"<p>Hide offers powerful search capabilities to help agents navigate and explore projects efficiently. There are three main types of search available:</p> <ol> <li>Content Search</li> <li>File Search</li> <li>Symbol Search</li> </ol> <p>Let's dive into each of these search types and see how you can leverage them in your projects.</p>"},{"location":"usage/search/#content-search","title":"Content Search","text":"<p>Content search allows you to find specific text patterns within your project files. This is incredibly useful when you need to locate particular code snippets, comments, or any textual content across your entire project.</p>"},{"location":"usage/search/#basic-usage","title":"Basic Usage","text":"<p>To perform a content search:</p> curlpython <pre><code>curl -X GET \"http://localhost:8080/projects/{projectId}/search?type=content&amp;query=your_search_query\"\n</code></pre> <pre><code>import hide\nfrom hide import model\n\nhc = hide.Client()\nproject = hc.create_project(\n    repository=model.Repository(url=\"https://github.com/your-username/your-repo\")\n)\n\nfiles = hc.search_files(\n    project_id=project.id, \n    query=\"your search query\"\n)\n</code></pre>"},{"location":"usage/search/#advanced-options","title":"Advanced Options","text":"<p>Hide's content search supports different search types:</p> <ul> <li>Default: Case-insensitive search</li> <li>Exact: Case-sensitive, exact match search</li> <li>Regex: Regular expression search</li> </ul> <p>You can specify the search type using query parameters:</p> curlpython <pre><code># Exact match\ncurl -X GET \"http://localhost:8080/projects/{projectId}/search?type=content&amp;query=YourExactPhrase&amp;exact\"\n\n# Regex search\ncurl -X GET \"http://localhost:8080/projects/{projectId}/search?type=content&amp;query=Your.*Regex&amp;regex\"\n</code></pre> <pre><code>import hide\nfrom hide import model\n\nhc = hide.Client()\nproject = hc.create_project(\n    repository=model.Repository(url=\"https://github.com/your-username/your-repo\")\n)\n\nfiles = hc.search_files(\n    project_id=project.id, \n    query=\"YourExactPhrase\", \n    exact=True\n)\n\nfiles = hc.search_files(\n    project_id=project.id, \n    query=\"Your.*Regex\", \n    regex=True\n)\n</code></pre>"},{"location":"usage/search/#additional-parameters","title":"Additional Parameters","text":"<p>Hide's content search also supports additional parameters to refine your search:</p> <ul> <li>showHidden: Include hidden files in the search</li> <li>include: Specify patterns for files to include in the search</li> <li>exclude: Specify patterns for files to exclude from the search</li> </ul> <p>Here are some examples:</p> curlpython <pre><code># Include hidden files in the search\ncurl -X GET \"http://localhost:8080/projects/{projectId}/search?type=content&amp;query=your_query&amp;showHidden\"\n\n# Include only .json and .txt files\ncurl -X GET \"http://localhost:8080/projects/{projectId}/search?type=content&amp;query=your_query&amp;include=*.json&amp;include=*.txt\"\n\n# Exclude 'node_modules' in the root directory\ncurl -X GET \"http://localhost:8080/projects/{projectId}/search?type=content&amp;query=your_query&amp;exclude=/node_modules\"\n\n# Exclude 'node_modules' on all levels\ncurl -X GET \"http://localhost:8080/projects/{projectId}/search?type=content&amp;query=your_query&amp;exclude=**/node_modules\"\n\n# Combine multiple parameters\ncurl -X GET \"http://localhost:8080/projects/{projectId}/search?type=content&amp;query=your_query&amp;include=*.json&amp;include=*.txt&amp;exclude=**/node_modules&amp;showHidden\"\n</code></pre> <pre><code>import hide\nfrom hide import model\n\nhc = hide.Client()\nproject = hc.create_project(\n    repository=model.Repository(url=\"https://github.com/your-username/your-repo\")\n)\n\nfiles = hc.search_files(\n    project_id=project.id, \n    query=\"your_query\", \n    show_hidden=True\n)\n\nfiles = hc.search_files(\n    project_id=project.id, \n    query=\"your_query\", \n    include=[\"*.json\", \"*.txt\"]\n)\n\nfiles = hc.search_files(\n    project_id=project.id, \n    query=\"your_query\", \n    exclude=[\"/node_modules\"]\n)\n\nfiles = hc.search_files(\n    project_id=project.id, \n    query=\"your_query\", \n    exclude=[\"**/node_modules\"]\n)\n\nfiles = hc.search_files(\n    project_id=project.id, \n    query=\"your_query\", \n    include=[\"*.json\", \"*.txt\"], \n    exclude=[\"**/node_modules\"], \n    show_hidden=True\n)\n</code></pre> <p>These additional parameters allow you to fine-tune your search to specific file types or directories, making it easier to find exactly what you're looking for in your project.</p>"},{"location":"usage/search/#file-search","title":"File Search","text":"<p>File search helps you find files within your project based on their names or paths. This is particularly useful when you're looking for specific files or want to filter files based on certain patterns.</p>"},{"location":"usage/search/#basic-usage_1","title":"Basic Usage","text":"<p>To search for files:</p> curlpython <pre><code>curl -X GET \"http://localhost:8080/projects/{projectId}/files\"\n</code></pre> <pre><code>import hide\nfrom hide import model\n\nhc = hide.Client()\nproject = hc.create_project(\n    repository=model.Repository(url=\"https://github.com/your-username/your-repo\")\n)\n\nfiles = hc.list_files(\n    project_id=project.id, \n)\n</code></pre>"},{"location":"usage/search/#filtering-files","title":"Filtering Files","text":"<p>You can use <code>include</code> and <code>exclude</code> parameters to filter the search results:</p> curlpython <pre><code># Search for files containing the word \"test\" in their path\ncurl -X GET \"http://localhost:8080/projects/{projectId}/files?include=test\"\n\n# Search for all Python files\ncurl -X GET \"http://localhost:8080/projects/{projectId}/files?include=*.py\"\n\n# Search for all files except for test files\ncurl -X GET \"http://localhost:8080/projects/{projectId}/files?exclude=test_*.py\"\n\n# Combine include and exclude\ncurl -X GET \"http://localhost:8080/projects/{projectId}/files?include=test&amp;include=*.py&amp;exclude=test_*.py\"\n</code></pre> <pre><code>import hide\nfrom hide import model\n\nhc = hide.Client()\nproject = hc.create_project(\n    repository=model.Repository(url=\"https://github.com/your-username/your-repo\")\n)\n\nfiles = hc.list_files(\n    project_id=project.id, \n    include=[\"test\"]\n)\n\nfiles = hc.list_files(\n    project_id=project.id, \n    include=[\"*.py\"]\n)\n\nfiles = hc.list_files(\n    project_id=project.id, \n    exclude=[\"test_*.py\"]\n)\n\nfiles = hc.list_files(\n    project_id=project.id, \n    include=[\"test\", \"*.py\"],\n    exclude=[\"test_*.py\"]\n)\n</code></pre>"},{"location":"usage/search/#symbol-search","title":"Symbol Search","text":"<p>Symbol search allows you to find specific symbols (like functions, classes, or variables) within your project. This is extremely helpful when you're trying to locate specific code elements without knowing their exact file location.</p>"},{"location":"usage/search/#basic-usage_2","title":"Basic Usage","text":"<p>To search for symbols:</p> curlpython <pre><code>curl -X GET \"http://localhost:8080/projects/{projectId}/symbols?type=symbol&amp;query=your_symbol_name\"\n</code></pre> <pre><code>import hide\nfrom hide import model\n\nhc = hide.Client()\nproject = hc.create_project(\n    repository=model.Repository(url=\"https://github.com/your-username/your-repo\")\n)\n\nsymbols = hc.search_symbols(\n    project_id=project.id, \n    query=\"your_symbol_name\"\n)\n</code></pre>"},{"location":"usage/search/#advanced-options_1","title":"Advanced Options","text":"<p>You can customize the symbol search with additional parameters:</p> <ul> <li><code>limit</code>: Specify the maximum number of results (default is 10, max is 100)</li> <li>Include or exclude specific symbol types. By default, the search will exclude fields and variables.</li> </ul> curlpython <pre><code># Limit results to 20\ncurl -X GET \"http://localhost:8080/projects/{projectId}/search?type=symbol&amp;query=your_symbol_name&amp;limit=20\"\n\n# Include only functions and classes (example, actual parameters may vary)\ncurl -X GET \"http://localhost:8080/projects/{projectId}/search?type=symbol&amp;query=your_symbol_name&amp;include=function&amp;include=class\"\n</code></pre> <pre><code># Coming soon\nimport hide\nfrom hide import model\n\nhc = hide.Client()\nproject = hc.create_project(\n    repository=model.Repository(url=\"https://github.com/your-username/your-repo\")\n)\n\nsymbols = hc.search_symbols(\n    project_id=project.id, \n    query=\"your_symbol_name\", \n    limit=20\n)\n\nsymbols = hc.search_symbols(\n    project_id=project.id, \n    query=\"your_symbol_name\", \n    include=[\"function\", \"class\"]\n)\n</code></pre>"},{"location":"usage/search/#tips-for-effective-searching","title":"Tips for Effective Searching","text":"<ol> <li>Use specific queries: The more specific your search query, the more accurate your results will be.</li> <li>Leverage regex: For complex search patterns, use regex in content search.</li> <li>Combine search types: Use file search to narrow down the scope, then use content search within those files.</li> <li>Utilize symbol search: When looking for specific code elements, symbol search can be faster than content search.</li> </ol> <p>By leveraging these search capabilities, coding agents can efficiently navigate and analyze projects, enabling faster code comprehension, more accurate task execution, and enhanced decision-making in various development scenarios. This empowers AI-driven development tools to provide more intelligent and context-aware assistance throughout the software development lifecycle.</p>"},{"location":"usage/tasks/","title":"Tasks","text":""},{"location":"usage/tasks/#understanding-tasks-in-hide","title":"Understanding Tasks in Hide","text":"<p>Tasks in Hide are predefined commands or scripts that can be executed within a project's devcontainer environment. They allow coding agents to perform various operations such as running tests, linting code, or executing custom scripts.</p> <p>Key features of Hide tasks:</p> <ol> <li>Environment-Specific: Tasks run within the project's devcontainer, ensuring consistency with the project's environment.</li> <li>Predefined or Ad-hoc: Tasks can be predefined in the project configuration or executed ad-hoc. The ad-hoc tasks are essentially the shell commands.</li> <li>Aliased Commands: Predefined tasks can be given aliases for easy reference.</li> </ol> <p>Note</p> <p>For all code examples, the server is assumed to be running on <code>localhost:8080</code>. Adjust the URL if your Hide server is running on a different host or port.</p>"},{"location":"usage/tasks/#defining-tasks","title":"Defining Tasks","text":"<p>Tasks are defined in the <code>devcontainer.json</code> file or in the project creation request under the <code>customizations.hide.tasks</code> section. Here's an example:</p> <pre><code>{\n    \"customizations\": {\n        \"hide\": {\n            \"tasks\": [\n                {\n                    \"alias\": \"test\",\n                    \"command\": \"pytest\"\n                },\n                {\n                    \"alias\": \"lint\",\n                    \"command\": \"flake8 .\"\n                }\n            ]\n        }\n    }\n}\n</code></pre>"},{"location":"usage/tasks/#running-predefined-tasks","title":"Running Predefined Tasks","text":"<p>To run a predefined task, you need to specify the project ID and the task alias.</p> curlpython <pre><code>curl -X POST http://localhost:8080/projects/123/tasks \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"alias\": \"test\"\n  }'\n</code></pre> <pre><code># Coming soon\n</code></pre>"},{"location":"usage/tasks/#running-ad-hoc-tasks","title":"Running Ad-hoc Tasks","text":"<p>To run an ad-hoc task, you need to specify the project ID and the task command.</p> curlpython <pre><code>curl -X POST http://localhost:8080/projects/123/tasks \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"command\": \"pytest path/to/test_file.py::test_function_name\"\n  }'\n</code></pre> <pre><code># Coming soon\n</code></pre>"},{"location":"usage/tasks/#running-tasks-with-a-timeout","title":"Running Tasks with a timeout","text":"<p>It's a good practice to set timeout for tasks, especially those generated by the agent. In order to do that add following header to the request</p> <pre><code>X-Timeout-Seconds: &lt;value&gt;\n</code></pre>"},{"location":"usage/tasks/#task-results","title":"Task Results","text":"<p>When a task is executed, Hide returns a TaskResult object containing:</p> <ul> <li><code>stdOut</code>: The standard output of the command</li> <li><code>stdErr</code>: The standard error output of the command</li> <li><code>exitCode</code>: The exit code of the command</li> </ul> <p>Example response:</p> <pre><code>{\n    \"stdOut\": \"All tests passed successfully.\\n\",\n    \"stdErr\": \"\",\n    \"exitCode\": 0\n}\n</code></pre> <p>Example response on timeout:</p> <pre><code>{\n    \"stdOut\": \"Test 1 passed successfully.\\n\",\n    \"stdErr\": \"\",\n    \"exitCode\": 124\n}\n</code></pre>"},{"location":"usage/tasks/#listing-available-tasks","title":"Listing Available Tasks","text":"<p>To get a list of all predefined tasks for a project:</p> curlpython <pre><code>curl -X GET http://localhost:8080/projects/123/tasks\n</code></pre> <pre><code># Coming soon\n</code></pre> <p>This will return a list of all predefined tasks for the project with id <code>123</code>.</p>"},{"location":"usage/tasks/#notes","title":"Notes","text":"<ul> <li>Tasks are executed synchronously, meaning that the request will be blocked until the task completes. The support for asynchronous tasks is coming soon!</li> </ul>"}]}